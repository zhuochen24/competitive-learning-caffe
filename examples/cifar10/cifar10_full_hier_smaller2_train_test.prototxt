name: "CIFAR10_full_hier_smaller2"
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "/home/zhuo/caffe/examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "/home/zhuo/caffe/examples/cifar10/cifar10_train_lmdb"
    batch_size: 500
    backend: LMDB
  }
}
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mean_file: "/home/zhuo/caffe/examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "/home/zhuo/caffe/examples/cifar10/cifar10_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "pool1"
  top: "pool1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 3
    alpha: 5e-05
    beta: 0.75
    norm_region: WITHIN_CHANNEL
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 8
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 3
    alpha: 5e-05
    beta: 0.75
    norm_region: WITHIN_CHANNEL
  }
}

##branch 0
layer {
  name: "ip1/b0"
  type: "InnerProduct"
  bottom: "norm2"
  top: "ip1/b0"
  param {
    lr_mult: 1
    decay_mult: 250
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "smax/b0"
  type: "Softmax"
  bottom: "ip1/b0"
  top: "smax/b0"
}

##branch 1
layer {
  name: "ip1/b1"
  type: "InnerProduct"
  bottom: "norm2"
  top: "ip1/b1"
  param {
    lr_mult: 1
    decay_mult: 250
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "smax/b1"
  type: "Softmax"
  bottom: "ip1/b1"
  top: "smax/b1"
}

layer {
  name: "smax/b0/reshape"
  top: "smax/b0/reshape"
  type: "Reshape"
  bottom: "smax/b0"
  reshape_param{
    shape{
     dim:0
     dim: 1
     dim: -1
    }
  }
}
layer {
  name: "smax/b1/reshape"
  top: "smax/b1/reshape"
  type: "Reshape"
  bottom: "smax/b1"
  reshape_param{
    shape{
     dim:0
     dim: 1
     dim: -1
    }
  }
}
layer {
  name: "out/concat"
  type: "Concat"
  bottom: "smax/b0/reshape"
  bottom: "smax/b1/reshape"
  top: "out/concat"
}

##bclass
layer {
  name: "ip1/bclass"
  type: "InnerProduct"
  bottom: "norm2"
  top: "ip1/bclass"
  param {
    lr_mult: 1
    decay_mult: 250
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "smax/bclass"
  type: "Softmax"
  bottom: "ip1/bclass"
  top: "smax/bclass"
}

##################################
# outputs and loss
################################
layer {
  name: "stochout"
  top: "stochout"
  type: "Python"
  bottom: "out/concat"
  bottom: "smax/bclass"
  python_param{
    module: "stoch_output"
    layer: "StochOutLayer"
  }
  include {
    phase: TEST
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "stochout"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "stochloss"
  type: "Python"
  bottom: "out/concat"
  bottom: "label"
  bottom: "smax/bclass"
  top: "stochloss"
  python_param{
    module: "stoch_loss"
    layer: "StochLossLayer"
  }
}
layer {
  name: "loss"
  top: "loss"
  type: "Reduction"
  bottom: "stochloss"
  reduction_param{
    operation: 4
  }
  loss_weight: 1
}

